//https://github.com/MakerAsia/KBProIDE/releases เเอป
//https://fablab.learninginventions.org/training-cmu/blog/%E0%B9%80%E0%B8%84%E0%B8%A3%E0%B8%B7%E0%B9%88%E0%B8%AD%E0%B8%87%E0%B9%83%E0%B8%AB%E0%B9%89%E0%B8%AD%E0%B8%B2%E0%B8%AB%E0%B8%B2%E0%B8%A3%E0%B8%AA%E0%B8%B8%E0%B8%99%E0%B8%B1%E0%B8%82%E0%B8%AD%E0%B8%B1/
//โปรเจค 
int freq = 2000;
int channel = 0;
int resolution = 8;


#define MOTOR_A1 26

#include <Wire.h>
#include <Adafruit_GFX.h>
#include "Adafruit_LEDBackpack.h"

Adafruit_8x16minimatrix matrix = Adafruit_8x16minimatrix();

#include <WiFi.h>
#include <IFTTTWebhook.h>
IFTTTWebhook wh("##ใส่ไลน์", "Line_notify");
#include "time.h"
struct tm timeinfo;


int buttonCount = 0;
int buttonCount2 = 0;

const int buttonPin = 16;   
const int buttonPin1 = 14;     

int buttonState = 0;         
int buttonState2 = 0;         

int num1 = 0;         
int num2 = 0;         


const char* ssid       = "iPhone";
const char* password   = "1212312121";
const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = 12600;
const int   daylightOffset_sec = 12600;



void printLocalTime()
{
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("Failed to obtain time");
    return;
  }
  Serial.println(&timeinfo, "%H:%M");
}

void setup()
{
  Serial.begin(115200);
  Serial.println("16x8 LED Mini Matrix Test");

  ledcSetup(channel, freq, resolution);
  ledcAttachPin(13, channel);

  matrix.begin(0x70);  

  pinMode(MOTOR_A1, OUTPUT);

  pinMode(buttonPin, INPUT_PULLUP);   
  pinMode(buttonPin1, INPUT_PULLUP); 

  //connect to WiFi
  Serial.printf("Connecting to %s ", ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println(" CONNECTED");

  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  printLocalTime();

}

void loop()
{
  delay(10);
  printLocalTime();

  buttonState = digitalRead(buttonPin);
  buttonState2 = digitalRead(buttonPin1);
  Serial.println(buttonState);  
  Serial.println(buttonState2);  
  Serial.println(buttonCount);    
  Serial.println(buttonCount2);   

  if ((buttonState == HIGH) && (buttonState2 == HIGH)) {
    matrix.setTextSize(1);
    matrix.setTextWrap(false);  
    matrix.setTextColor(LED_ON);
    matrix.setRotation(1);
    for (int8_t x = 16; x >= -32; x--) {
      matrix.clear();
      matrix.setCursor(x, 0);
      getLocalTime(&timeinfo);
      matrix.print(&timeinfo, "%H:%M");
      matrix.writeDisplay();
      delay(50);
    }
  }

  if (buttonState == LOW) {
    if (buttonCount < 23) {
      buttonCount++;
      ledcWrite(channel, 100);
      delay(30);
      ledcWrite(channel, 0);
      matrix.setTextSize(1);
      matrix.setTextWrap(false);  
      matrix.setTextColor(LED_ON);
      matrix.setRotation(1);
      for (int8_t x = 16; x >= -16; x--) {
        matrix.clear();
        matrix.setCursor(x, 0);
        matrix.print(buttonCount);
        matrix.writeDisplay();
        delay(20);

      }
    } else {
      buttonCount = 0;
    }
  }






  //*******************SWICH2***************


  /*

    if (buttonState2 == HIGH) {
     // matrix.clear();
      matrix.setTextSize(1);
      matrix.setTextWrap(false);  // we dont want text to wrap so it scrolls nicely
      matrix.setTextColor(LED_ON);
      matrix.setRotation(1);
      for (int8_t x = 16; x >= -32; x--) {
        matrix.clear();
        matrix.setCursor(x, 0);
        getLocalTime(&timeinfo);
        matrix.print(&timeinfo, "%H:%M");
        //matrix.print(buttonCount);
        matrix.writeDisplay();
        delay(50);
      }
    }
  */

  /*
    // check if the pushbutton is pressed. If it is, the buttonState is HIGH:
    if (buttonState2 == HIGH) {
      // turn LED on:
      digitalWrite(ledPin, HIGH);
    } else {
      // turn LED off:
      digitalWrite(ledPin, LOW);
    }
  */


  if (buttonState2 == LOW) {
    if (buttonCount2 < 59) {
      buttonCount2 += 5;
      ledcWrite(channel, 100);
      delay(30);
      ledcWrite(channel, 0);
      matrix.clear();
      matrix.setTextSize(1);
      matrix.setTextWrap(false);  
      matrix.setTextColor(LED_ON);
      matrix.setRotation(1);
      for (int8_t x = 16; x >= -16; x--) {
        matrix.clear();
        matrix.setCursor(x, 0);
        matrix.print(buttonCount2);
        matrix.writeDisplay();
        delay(20);

      }
    } else {
      buttonCount2 = 0;
    }
  }


  /*
    //**********Sent notify  Hour and min


    if (timeinfo.tm_hour == buttonCount && num1 == 0) {
      //&& (timeinfo.tm_min == 00  ))
      digitalWrite(MOTOR_A1, HIGH);
      delay(5000);
      digitalWrite(MOTOR_A1, LOW);


      //wh.trigger();
      wh.trigger("Hi..");
      wh.trigger("DOG-EAT");
      wh.trigger("THANK..");
      num1 = 1 ;
    }
    if (timeinfo.tm_hour == buttonState == HIGH) {
      num1 = 0 ;
      digitalWrite(MOTOR_A1, LOW);
    }




    if (timeinfo.tm_min == buttonCount2 && num2 == 0) {
      //&& (timeinfo.tm_min == 00  ))
      digitalWrite(MOTOR_A1, HIGH);
      delay(5000);
      digitalWrite(MOTOR_A1, LOW);


      //wh.trigger();
      wh.trigger("Hi..");
      wh.trigger("DOG-EAT");
      wh.trigger("THANK..");
      num2 = 1 ;
    }
    if (timeinfo.tm_min == buttonState2 == HIGH) {
      num2 = 0 ;
      digitalWrite(MOTOR_A1, LOW);
    }

  */

  //*********** if TIME Real == Hour and Min

  if ((timeinfo.tm_hour == buttonCount) && (timeinfo.tm_min == buttonCount2)) {
    digitalWrite(MOTOR_A1, HIGH);
    delay(5000);
    digitalWrite(MOTOR_A1, LOW);

    ledcWrite(channel, 100);
    delay(100);
    ledcWrite(channel, 0);
    delay(100);
    ledcWrite(channel, 100);
    delay(100);
    ledcWrite(channel, 0);
    delay(1000);

    ledcWrite(channel, 100);
    delay(100);
    ledcWrite(channel, 0);
    delay(100);
    ledcWrite(channel, 100);
    delay(100);
    ledcWrite(channel, 0);
    delay(1000);

    ledcWrite(channel, 100);
    delay(100);
    ledcWrite(channel, 0);
    delay(100);
    ledcWrite(channel, 100);
    delay(100);
    ledcWrite(channel, 0);
    delay(1000);

    ledcWrite(channel, 100);
    delay(100);
    ledcWrite(channel, 0);
    delay(100);
    ledcWrite(channel, 100);
    delay(100);
    ledcWrite(channel, 0);
    delay(1000);

    wh.trigger("Hi..");
    wh.trigger("NOW..DOG..EAT");
    wh.trigger("AND");
    wh.trigger("A..DOG..SAFE");
    wh.trigger("THANK..");

    matrix.clear();
    matrix.setTextSize(1);
    matrix.setTextWrap(false);  
    matrix.setTextColor(LED_ON);
    matrix.setRotation(1);
    for (int8_t x = 16; x >= -32; x--) {
      matrix.clear();
      matrix.setCursor(x, 0);
      matrix.print("COME EAT!!");
      matrix.writeDisplay();
      delay(200);
    }

    matrix.clear();
    matrix.setTextSize(1);
    matrix.setTextWrap(false);  
    matrix.setTextColor(LED_ON);
    matrix.setRotation(1);
    for (int8_t x = 16; x >= -32; x--) {
      matrix.clear();
      matrix.setCursor(x, 0);
      matrix.print("ZZZZZZZZzzzzzzzz");
      matrix.writeDisplay();
      delay(500);
    }




  }
}